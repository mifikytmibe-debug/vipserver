#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Roblox VIP Link Bot (Telegram) ‚Äî —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
---------------------------------------------------
–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
‚Ä¢ –í—ã–¥–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ VIP/–ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ Roblox (–∫–Ω–æ–ø–∫–∞–º–∏).
‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª @thespikeacc + –∫–Ω–æ–ø–∫–∞ ¬´–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª.
‚Ä¢ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:
  - üéÆ –ò–≥—Ä—ã: —Å–ø–∏—Å–æ–∫ –∏–≥—Ä, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∏–≥—Ä.
  - üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: —Å–ø–∏—Å–æ–∫, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π, –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ (—Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∏–∫–∏).
‚Ä¢ SQLite –±–∞–∑–∞ (bot.db): —Ç–∞–±–ª–∏—Ü—ã games, users, events.
‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –ª—ë–≥–∫–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –∫–æ–¥–µ.

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
pip install pyTelegramBotAPI python-dotenv
"""

import os
import re
import time
import sqlite3
import logging
from typing import Dict, Optional, List, Tuple

from dotenv import load_dotenv
import telebot
from telebot.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    Message,
    CallbackQuery,
)

# ==================== –ö–æ–Ω—Ñ–∏–≥/–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ====================
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ .env")

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –≤ .env: ADMIN_IDS=111,222,333
ADMIN_IDS = {
    int(x.strip())
    for x in os.getenv("ADMIN_IDS", "").split(",")
    if x.strip().isdigit()
}

# –ö–∞–Ω–∞–ª —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
CHANNEL_USERNAME = "@thespikeacc"   # ‚Üê —Ç–≤–æ–π –∫–∞–Ω–∞–ª

# –õ–æ–≥ –≤ —Ñ–∞–π–ª (—Å–æ–≤–µ—Ç—É—é –æ—Å—Ç–∞–≤–∏—Ç—å ‚Äî –ø–æ–ª–µ–∑–Ω–æ –ø—Ä–∏ —Ñ–æ–Ω–æ–≤–æ–º –∑–∞–ø—É—Å–∫–µ —á–µ—Ä–µ–∑ pythonw.exe)
logging.basicConfig(
    filename="bot.log",
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
)
logger = logging.getLogger("roblox_vip_bot")

# ==================== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ====================
bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

# ==================== –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (SQLite) ====================
DB_PATH = "bot.db"

def db() -> sqlite3.Connection:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î (–∫–∞–∂–¥—ã–π –≤—ã–∑–æ–≤ ‚Äî –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –∞–≤—Ç–æ-commit)."""
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ."""
    with db() as conn:
        c = conn.cursor()
        # –ò–≥—Ä—ã
        c.execute("""
        CREATE TABLE IF NOT EXISTS games (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            url TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )""")
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        c.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE NOT NULL,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )""")
        # –°–æ–±—ã—Ç–∏—è/–ª–æ–≥–∏
        c.execute("""
        CREATE TABLE IF NOT EXISTS events (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,  -- —ç—Ç–æ Telegram user_id
            type TEXT NOT NULL,        -- 'message' –∏–ª–∏ 'callback'
            content TEXT NOT NULL,     -- —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è / callback_data
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )""")

def seed_initial_games_if_empty():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∏–≥—Ä–∞–º–∏, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è.
    –ï—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è LINK_..., –≤–æ–∑—å–º—ë–º –æ—Ç—Ç—É–¥–∞ URL.
    """
    defaults = [
        ("Adopt Me",       os.getenv("LINK_ADOPT_ME")),
        ("Grow A Garden",  os.getenv("LINK_GROW_A_GARDEN")),
        ("Murder Mystery 2", os.getenv("LINK_MURDER_MYSTERY_2")),
        ("Jailbreak",      os.getenv("LINK_JAILBREAK")),
        ("Blox Fruits",    os.getenv("LINK_BLOX_FRUITS")),
        ("Pls Donate",     os.getenv("LINK_PLS_DONATE")),
    ]
    with db() as conn:
        c = conn.cursor()
        cnt = c.execute("SELECT COUNT(*) FROM games").fetchone()[0]
        if cnt == 0:
            for title, url in defaults:
                c.execute("INSERT INTO games(title, url) VALUES(?, ?)", (title, url))

def add_game(title: str, url: Optional[str]) -> int:
    with db() as conn:
        c = conn.cursor()
        c.execute("INSERT INTO games(title, url) VALUES(?, ?)", (title.strip(), (url or "").strip() or None))
        return c.lastrowid

def update_game_url(game_id: int, url: str):
    with db() as conn:
        conn.execute("UPDATE games SET url=? WHERE id=?", (url.strip(), game_id))

def get_game(game_id: int) -> Optional[sqlite3.Row]:
    with db() as conn:
        r = conn.execute("SELECT * FROM games WHERE id=?", (game_id,)).fetchone()
        return r

def list_games(offset: int = 0, limit: int = 20) -> List[sqlite3.Row]:
    with db() as conn:
        return conn.execute(
            "SELECT * FROM games ORDER BY id ASC LIMIT ? OFFSET ?",
            (limit, offset)
        ).fetchall()

def count_games() -> int:
    with db() as conn:
        return conn.execute("SELECT COUNT(*) FROM games").fetchone()[0]

def upsert_user(message_from):
    """–°–æ–∑–¥–∞—ë–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø—Ä–∏ –ª—é–±–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏."""
    try:
        with db() as conn:
            conn.execute(
                """INSERT INTO users(user_id, username, first_name, last_name)
                   VALUES(?,?,?,?)
                   ON CONFLICT(user_id) DO UPDATE SET
                     username=excluded.username,
                     first_name=excluded.first_name,
                     last_name=excluded.last_name
                """,
                (message_from.id, message_from.username, message_from.first_name, message_from.last_name)
            )
    except Exception as e:
        logger.error(f"upsert_user error: {e}")

def log_event(user_id: int, type_: str, content: str):
    """–õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ (–≤ –ë–î + –ª–æ–≥-—Ñ–∞–π–ª)."""
    try:
        with db() as conn:
            conn.execute(
                "INSERT INTO events(user_id, type, content) VALUES(?,?,?)",
                (user_id, type_, content)
            )
    except Exception as e:
        logger.error(f"log_event error: {e}")

def list_users(offset: int = 0, limit: int = 10) -> List[sqlite3.Row]:
    """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–µ–π—Å—Ç–≤–∏–π."""
    with db() as conn:
        return conn.execute("""
            SELECT u.*, 
                   (SELECT COUNT(*) FROM events e WHERE e.user_id = u.user_id) AS actions_count
            FROM users u
            ORDER BY u.created_at DESC
            LIMIT ? OFFSET ?
        """, (limit, offset)).fetchall()

def count_users() -> int:
    with db() as conn:
        return conn.execute("SELECT COUNT(*) FROM users").fetchone()[0]

def list_user_events(tg_user_id: int, offset: int = 0, limit: int = 20) -> List[sqlite3.Row]:
    with db() as conn:
        return conn.execute("""
            SELECT * FROM events
            WHERE user_id=?
            ORDER BY created_at DESC, id DESC
            LIMIT ? OFFSET ?
        """, (tg_user_id, limit, offset)).fetchall()

def count_user_events(tg_user_id: int) -> int:
    with db() as conn:
        return conn.execute("SELECT COUNT(*) FROM events WHERE user_id=?", (tg_user_id,)).fetchone()[0]

# ==================== –í—Å–ø–æ–º–æ–≥–∞–ª–∫–∏ (–≤–∞–ª–∏–¥–∞—Ü–∏—è/–ª–∏–º–∏—Ç) ====================
URL_RE = re.compile(r"^https?://[^\s]+$", re.IGNORECASE)

USER_LAST_TS: Dict[int, float] = {}
COOLDOWN_SECONDS = 1.0

def validate_url(url: str) -> bool:
    return bool(URL_RE.match(url.strip()))

def rate_limit_ok(user_id: int) -> bool:
    now = time.time()
    last = USER_LAST_TS.get(user_id, 0.0)
    if now - last < COOLDOWN_SECONDS:
        return False
    USER_LAST_TS[user_id] = now
    return True

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

# ==================== –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª ====================
def is_subscribed(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª. –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö/–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ ‚Äî —Å–¥–µ–ª–∞–π—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–æ–º.
    """
    try:
        chat_member = bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return chat_member.status in ["member", "administrator", "creator"]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

def subscribe_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π."""
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}"))
    kb.add(InlineKeyboardButton("üîÑ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="sub:check"))
    return kb

# ==================== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–≥–ª–∞–≤–Ω–æ–µ/—Å–ø–∏—Å–∫–∏) ====================
def main_menu_kb() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (—Å–ø–∏—Å–æ–∫ –∏–≥—Ä) ‚Äî –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑ –ë–î, –ø–æ 2 –≤ —Ä—è–¥."""
    kb = InlineKeyboardMarkup(row_width=2)
    buttons: List[InlineKeyboardButton] = []
    for row in list_games(0, 50):  # –¥–æ 50 –∏–≥—Ä –≤ –º–µ–Ω—é, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–¥–µ–ª–∞—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        buttons.append(InlineKeyboardButton(text=row["title"], callback_data=f"g:{row['id']}"))
    # –†–∞–∑–ª–æ–∂–∏–º –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(buttons), 2):
        kb.row(*buttons[i:i+2])
    kb.row(
        InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about"),
        InlineKeyboardButton("üßæ –í—Å–µ —Å—Å—ã–ª–∫–∏", callback_data="list_all"),
    )
    return kb

def links_kb(links: Dict[str, str]) -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–≥—Ä—ã (–∏ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥)."""
    kb = InlineKeyboardMarkup()
    for title, url in links.items():
        kb.add(InlineKeyboardButton(f"üîó {title}", url=url))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main"))
    return kb

# --- –ê–¥–º–∏–Ω: –ø–∞–Ω–µ–ª—å/–º–µ–Ω—é
def admin_root_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üéÆ –ò–≥—Ä—ã", callback_data="adm:games:0"),
        InlineKeyboardButton("üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="adm:users:0")
    )
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main"))
    return kb

def admin_games_kb(page: int = 0, page_size: int = 10) -> InlineKeyboardMarkup:
    """–°–ø–∏—Å–æ–∫ –∏–≥—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è + –ø–∞–≥–∏–Ω–∞—Ü–∏—è + –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É."""
    kb = InlineKeyboardMarkup(row_width=1)
    offset = page * page_size
    games = list_games(offset, page_size)
    for g in games:
        kb.add(InlineKeyboardButton(f"‚úèÔ∏è {g['title']}", callback_data=f"adm:game:edit:{g['id']}"))

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    total = count_games()
    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"adm:games:{page-1}"))
    if offset + page_size < total:
        nav.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"adm:games:{page+1}"))
    if nav:
        kb.row(*nav)

    kb.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É", callback_data="adm:game:add"))
    kb.add(InlineKeyboardButton("üè† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="adm:root"))
    return kb

def admin_users_kb(page: int = 0, page_size: int = 10) -> InlineKeyboardMarkup:
    """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–µ–π—Å—Ç–≤–∏–π) + –ø–∞–≥–∏–Ω–∞—Ü–∏—è."""
    kb = InlineKeyboardMarkup(row_width=1)
    offset = page * page_size
    users = list_users(offset, page_size)
    for u in users:
        uname = f"@{u['username']}" if u['username'] else f"id{u['user_id']}"
        kb.add(InlineKeyboardButton(f"üë§ {uname} ‚Ä¢ –¥–µ–π—Å—Ç–≤–∏–π: {u['actions_count']}", callback_data=f"adm:user:{u['user_id']}:0"))
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    total = count_users()
    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"adm:users:{page-1}"))
    if offset + page_size < total:
        nav.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"adm:users:{page+1}"))
    if nav:
        kb.row(*nav)
    kb.add(InlineKeyboardButton("üè† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="adm:root"))
    return kb

def admin_user_logs_kb(tg_user_id: int, page: int = 0, page_size: int = 20) -> InlineKeyboardMarkup:
    """–ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ –ª–æ–≥–∞–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    kb = InlineKeyboardMarkup(row_width=2)
    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"adm:user:{tg_user_id}:{page-1}"))
    # –ï—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞?
    total = count_user_events(tg_user_id)
    if (page + 1) * page_size < total:
        nav.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"adm:user:{tg_user_id}:{page+1}"))
    if nav:
        kb.row(*nav)
    kb.add(InlineKeyboardButton("üìã –ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="adm:users:0"))
    kb.add(InlineKeyboardButton("üè† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="adm:root"))
    return kb

# ==================== –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ—à–∞–≥–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π (–≤ –ø–∞–º—è—Ç–∏) ====================
"""
PENDING_ACTIONS: –∑–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —Å–µ–π—á–∞—Å –¥–µ–ª–∞–µ—Ç –∞–¥–º–∏–Ω:
- { admin_id: {"type": "add_game_title" / "add_game_url", "data": {...}} }
- { admin_id: {"type": "edit_game_url", "data": {"game_id": 1}} }
"""
PENDING_ACTIONS: Dict[int, Dict] = {}

# ==================== –ö–æ–º–∞–Ω–¥—ã ====================
@bot.message_handler(commands=["start"])
def cmd_start(message: Message):
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∏—à–µ–º –ª–æ–≥
    upsert_user(message.from_user)
    log_event(message.from_user.id, "message", "/start")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not is_subscribed(message.from_user.id):
        bot.send_message(message.chat.id, "üö´ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!", reply_markup=subscribe_kb())
        return

    if not rate_limit_ok(message.from_user.id):
        return

    bot.send_message(message.chat.id, "<b>–ü—Ä–∏–≤–µ—Ç!</b>\n–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É –Ω–∏–∂–µ üëá", reply_markup=main_menu_kb())

@bot.message_handler(commands=["links"])
def cmd_links(message: Message):
    upsert_user(message.from_user)
    log_event(message.from_user.id, "message", "/links")

    if not is_subscribed(message.from_user.id):
        bot.send_message(message.chat.id, "üö´ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=subscribe_kb())
        return

    if not rate_limit_ok(message.from_user.id):
        return

    # –°–æ–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏ –ø–æ –≤—Å–µ–º –∏–≥—Ä–∞–º (—Ç–æ–ª—å–∫–æ —Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å URL)
    rows = list_games(0, 1000)
    links = {r["title"]: r["url"] for r in rows if r["url"]}
    if not links:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –°—Å—ã–ª–∫–∏ –ø–æ–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω—ã.")
        return

    bot.send_message(message.chat.id, "<b>–°—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ –∏–≥—Ä—ã:</b>", reply_markup=links_kb(links))

@bot.message_handler(commands=["admin"])
def cmd_admin(message: Message):
    upsert_user(message.from_user)
    log_event(message.from_user.id, "message", "/admin")

    if not is_subscribed(message.from_user.id):
        bot.send_message(message.chat.id, "üö´ –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=subscribe_kb())
        return

    if not rate_limit_ok(message.from_user.id):
        return

    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    bot.send_message(message.chat.id, "<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b> ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=admin_root_kb())

# ==================== Callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ====================
@bot.callback_query_handler(func=lambda c: c.data == "sub:check")
def cb_check_subscription(call: CallbackQuery):
    # –õ–æ–≥–∏—Ä—É–µ–º –∫–ª–∏–∫
    upsert_user(call.from_user)
    log_event(call.from_user.id, "callback", "sub:check")

    if is_subscribed(call.from_user.id):
        bot.send_message(call.message.chat.id, "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç.", reply_markup=main_menu_kb())
    else:
        bot.send_message(call.message.chat.id, "‚ùå –í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=subscribe_kb())

@bot.callback_query_handler(func=lambda c: True)
def on_callback(call: CallbackQuery):
    data = call.data or ""

    # –í—Å–µ–≥–¥–∞ –ª–æ–≥–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –∏ –∞–ø—Å–µ—Ä—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    upsert_user(call.from_user)
    log_event(call.from_user.id, "callback", data)

    # –î–ª—è –≤—Å–µ—Ö –≤–µ—Ç–æ–∫, –∫—Ä–æ–º–µ ¬´about¬ª –∏–ª–∏ —á–∏—Å—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö, —Ç—Ä–µ–±—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if data not in ("about",) and not is_subscribed(call.from_user.id):
        bot.send_message(call.message.chat.id, "üö´ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!", reply_markup=subscribe_kb())
        return

    # ---------- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —á–∞—Å—Ç—å ----------
    if data.startswith("g:"):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∏–≥—Ä—É
        game_id = int(data.split(":")[1])
        row = get_game(game_id)
        if row and row["url"]:
            bot.send_message(
                call.message.chat.id,
                f"<b>{row['title']}</b>\n–ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è ‚Äî –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=links_kb({row["title"]: row["url"]})
            )
        else:
            bot.send_message(call.message.chat.id, "‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞.")

    elif data == "about":
        bot.send_message(call.message.chat.id, "–≠—Ç–æ—Ç –±–æ—Ç –≤—ã–¥–∞—ë—Ç VIP-—Å—Å—ã–ª–∫–∏ –Ω–∞ Roblox —Å–µ—Ä–≤–µ—Ä–∞ (–ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –∏–≥—Ä—ã —Å –¥—Ä—É–∑—å—è–º–∏).")

    elif data == "list_all":
        rows = list_games(0, 1000)
        links = {r["title"]: r["url"] for r in rows if r["url"]}
        if not links:
            bot.send_message(call.message.chat.id, "‚ö†Ô∏è –°—Å—ã–ª–∫–∏ –ø–æ–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω—ã.")
        else:
            bot.send_message(call.message.chat.id, "<b>–°—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ –∏–≥—Ä—ã:</b>", reply_markup=links_kb(links))

    elif data == "back_main":
        try:
            bot.edit_message_text("–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É –Ω–∏–∂–µ üëá", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=main_menu_kb())
        except Exception:
            bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É –Ω–∏–∂–µ üëá", reply_markup=main_menu_kb())

    # ---------- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ----------
    elif data == "adm:root":
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, "–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤")
            return
        bot.send_message(call.message.chat.id, "<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b> ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=admin_root_kb())

    # –†–∞–∑–¥–µ–ª ¬´–ò–≥—Ä—ã¬ª —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    elif data.startswith("adm:games:"):
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, "–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤")
            return
        page = int(data.split(":")[2])
        bot.send_message(call.message.chat.id, "<b>üéÆ –ò–≥—Ä—ã</b>", reply_markup=admin_games_kb(page))

    elif data == "adm:game:add":
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, "–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤")
            return
        # –®–∞–≥ 1: –∑–∞–ø—Ä–æ—Å–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
        PENDING_ACTIONS[call.from_user.id] = {"type": "add_game_title", "data": {}}
        bot.send_message(call.message.chat.id, "üÜï –í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã</b>:\n(–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code>)")

    elif data.startswith("adm:game:edit:"):
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, "–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤")
            return
        game_id = int(data.split(":")[3])
        row = get_game(game_id)
        if not row:
            bot.send_message(call.message.chat.id, "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        # –ü—Ä–µ–¥–ª–æ–∂–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É
        PENDING_ACTIONS[call.from_user.id] = {"type": "edit_game_url", "data": {"game_id": game_id}}
        bot.send_message(call.message.chat.id, f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É</b> –¥–ª—è <b>{row['title']}</b>:\n(–∏–ª–∏ <code>–æ—Ç–º–µ–Ω–∞</code>)")

    # –†–∞–∑–¥–µ–ª ¬´–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏¬ª —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    elif data.startswith("adm:users:"):
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, "–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤")
            return
        page = int(data.split(":")[2])
        bot.send_message(call.message.chat.id, "<b>üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>", reply_markup=admin_users_kb(page))

    # –õ–æ–≥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)
    elif data.startswith("adm:user:"):
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, "–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤")
            return
        _, _, user_id_str, page_str = data.split(":")
        tg_user_id = int(user_id_str)
        page = int(page_str)
        # –ü–æ–∫–∞–∂–µ–º —á–∞—Å—Ç—å –ª–æ–≥–æ–≤
        page_size = 20
        offset = page * page_size
        events = list_user_events(tg_user_id, offset, page_size)
        total = count_user_events(tg_user_id)

        if not events:
            bot.send_message(call.message.chat.id, "–õ–æ–≥–∏ –ø—É—Å—Ç—ã.")
        else:
            lines = [f"<b>–õ–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_user_id}</b> (–≤—Å–µ–≥–æ {total}):"]
            for e in events:
                lines.append(f"‚Ä¢ [{e['created_at']}] <i>{e['type']}</i>: {telebot.util.escape(e['content']) if hasattr(telebot, 'util') else e['content']}")
            bot.send_message(call.message.chat.id, "\n".join(lines), reply_markup=admin_user_logs_kb(tg_user_id, page))

# ==================== –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—à–∞–≥–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π (–∞–¥–º–∏–Ω) ====================
@bot.message_handler(func=lambda m: True, content_types=["text"])
def any_text_logger(message: Message):
    """
    1) –õ–æ–≥–∏—Ä—É–µ–º –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    2) –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ "–æ–∂–∏–¥–∞–Ω–∏–µ —à–∞–≥–∞" –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ.
    """
    # –í—Å–µ–≥–¥–∞ –∞–ø—Å–µ—Ä—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∏—à–µ–º –ª–æ–≥
    upsert_user(message.from_user)
    log_event(message.from_user.id, "message", message.text or "")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —à–∞–≥–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    state = PENDING_ACTIONS.get(message.from_user.id)
    if not state or not is_admin(message.from_user.id):
        return  # –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

    text = (message.text or "").strip()

    # –û–±—â–µ–µ —Å–ª–æ–≤–æ –¥–ª—è –æ—Ç–º–µ–Ω—ã
    if text.lower() == "–æ—Ç–º–µ–Ω–∞":
        PENDING_ACTIONS.pop(message.from_user.id, None)
        bot.reply_to(message, "‚ùé –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return

    # --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã: —à–∞–≥ 1 ‚Äî –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è
    if state["type"] == "add_game_title":
        # –°–æ—Ö—Ä–∞–Ω–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å–ø—Ä–æ—Å–∏–º —Å—Å—ã–ª–∫—É
        state["type"] = "add_game_url"
        state["data"]["title"] = text
        bot.reply_to(message, "üîó –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Å—Å—ã–ª–∫—É</b> (URL) –Ω–∞ VIP/–ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã:\n(–∏–ª–∏ <code>–æ—Ç–º–µ–Ω–∞</code>)")
        return

    # --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã: —à–∞–≥ 2 ‚Äî –≤–≤–æ–¥ —Å—Å—ã–ª–∫–∏
    if state["type"] == "add_game_url":
        if not validate_url(text):
            bot.reply_to(message, "‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code>.")
            return
        title = state["data"]["title"]
        game_id = add_game(title, text)
        PENDING_ACTIONS.pop(message.from_user.id, None)
        bot.reply_to(message, f"‚úÖ –ò–≥—Ä–∞ <b>{title}</b> –¥–æ–±–∞–≤–ª–µ–Ω–∞ (id={game_id}).", reply_markup=admin_games_kb(0))
        return

    # --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –∏–≥—Ä—ã
    if state["type"] == "edit_game_url":
        game_id = state["data"]["game_id"]
        if not validate_url(text):
            bot.reply_to(message, "‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code>.")
            return
        update_game_url(game_id, text)
        row = get_game(game_id)
        PENDING_ACTIONS.pop(message.from_user.id, None)
        bot.reply_to(message, f"‚úÖ –°—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è <b>{row['title']}</b>.", reply_markup=admin_games_kb(0))
        return

# ==================== –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ====================
if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    init_db()
    seed_initial_games_if_empty()

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    # –ù–∞–¥—ë–∂–Ω—ã–π polling (–Ω–µ –ø–∞–¥–∞–µ—Ç –ø—Ä–∏ –µ–¥–∏–Ω–∏—á–Ω—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö)
    bot.infinity_polling(timeout=60, long_polling_timeout=50)
